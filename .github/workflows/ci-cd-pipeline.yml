# Description: setup backend & frontend, init unit test & integration test
# Last Update: 25-01-2025
# By: Fabi Liria
# version: 2.3
# TODO: add e2e tests, Jmeter & Locust
name: CI/CD Pipeline

on:
  push:
    branches:
      - development
      - qa
      - main
  pull_request:
    branches:
      - development
      - qa
      - main

jobs:
  check-package-json:
    runs-on: ubuntu-latest
    outputs:
      has_package_json_frontend: ${{ steps.check_frontend.outputs.has_package_json }}
      has_package_json_backend: ${{ steps.check_backend.outputs.has_package_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for package.json in frontend
        id: check_frontend
        run: |
          if [ -f frontend/package.json ]; then
            echo "::set-output name=has_package_json::true"
          else
            echo "::set-output name=has_package_json::false"
          fi

      - name: Check for package.json in backend
        id: check_backend
        run: |
          if [ -f backend/package.json ]; then
            echo "::set-output name=has_package_json::true"
          else
            echo "::set-output name=has_package_json::false"
          fi

  setup-frontend:
    runs-on: ubuntu-latest
    needs: check-package-json
    if: ${{ needs.check-package-json.outputs.has_package_json_frontend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

  setup-backend:
    runs-on: ubuntu-latest
    needs: check-package-json
    if: ${{ needs.check-package-json.outputs.has_package_json_backend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js for backend
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

  prettier-frontend:
    runs-on: ubuntu-latest
    needs: setup-frontend
    if: ${{ needs.check-package-json.outputs.has_package_json_frontend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run prettier for frontend
        run: |
          cd frontend
          npx prettier --write .

  prettier-backend:
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ needs.check-package-json.outputs.has_package_json_backend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run prettier for backend
        run: |
          cd backend
          npx prettier --write .

  lint-frontend:
    runs-on: ubuntu-latest
    needs: setup-frontend
    if: ${{ needs.check-package-json.outputs.has_package_json_frontend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run linter for frontend
        run: |
          cd frontend
          npm install eslint@8.57.0 eslint-plugin-react@7.35.0
          npx eslint --fix .

  lint-backend:
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ needs.check-package-json.outputs.has_package_json_backend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run linter for backend
        run: |
          cd backend
          npm install eslint@8.57.0
          npx eslint --fix .

  test-frontend:
    runs-on: ubuntu-latest
    needs: setup-frontend
    if: ${{ needs.check-package-json.outputs.has_package_json_frontend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests for frontend
        run: |
          cd frontend
          npm i jest-environment-jsdom@29.7.0
          npx jest

  test-backend:
    runs-on: ubuntu-latest
    needs: setup-backend
    if: ${{ needs.check-package-json.outputs.has_package_json_backend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests for backend
        env:
          MONGODB_URI_TEST: ${{ secrets.MONGODB_URI_TEST }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
        run: |
          cd backend
          npm i jest-environment-jsdom@29.7.0 node-fetch@2.7.0
          npx jest

  build-frontend:
    runs-on: ubuntu-latest
    needs: [setup-frontend, lint-frontend, test-frontend, prettier-frontend]
    if: ${{ needs.check-package-json.outputs.has_package_json_frontend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build the frontend application
        env:
          CI: false
        run: |
          cd frontend
          npm i react-scripts@5.0.1
          npm run build

      - name: Upload build artifacts for frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-artifacts
          path: frontend/build/

  build-backend:
    runs-on: ubuntu-latest
    needs: [setup-backend, lint-backend, test-backend, prettier-backend]
    if: ${{ needs.check-package-json.outputs.has_package_json_backend == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build the backend application
        run: |
          cd backend
          npm i react-scripts@5.0.1
          npm run build

      - name: Upload build artifacts for backend
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifacts
          path: backend/build/

  sonarcloud:
    runs-on: ubuntu-latest
    environment: secrets
    needs: [setup-frontend, lint-frontend, test-frontend, prettier-frontend, build-frontend, setup-backend, lint-backend, test-backend, prettier-backend, build-backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend && npm install
          cd ../backend && npm install

      - name: Set branch name
        run: echo "SONAR_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io

  deploy:
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.ref == 'refs/heads/Production'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend/build

  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
        
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

  check-commit-message-development:
    runs-on: ubuntu-latest
    outputs:
      should_create_pr: ${{ steps.check.outputs.should_create_pr }}
      commit_details: ${{ steps.check.outputs.commit_details }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check commit message
        id: check
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MESSAGE"
          if echo "$COMMIT_MESSAGE" | grep -q "QA transition:"; then
            COMMIT_DETAILS=$(echo "$COMMIT_MESSAGE" | sed -n 's/.*QA transition: \(.*\)/\1/p')
            echo "should_create_pr=true" >> $GITHUB_ENV
            echo "::set-output name=should_create_pr::true"
            echo "::set-output name=commit_details::$COMMIT_DETAILS"
          else
            echo "should_create_pr=false" >> $GITHUB_ENV
            echo "::set-output name=should_create_pr::false"
            echo "::set-output name=commit_details::"
          fi

  create-pull-request-development:
    runs-on: ubuntu-latest
    needs: check-commit-message-development
    if: needs.check-commit-message-development.outputs.should_create_pr == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Create Pull Request to QA
        run: |
          BODY="This is an automated pull request created from the Development branch to QA.

          Details:
          ${{ needs.check-commit-message-development.outputs.commit_details }}"
          gh pr create -B QA -H Development --title 'Automated PR from Development to QA' --body "$BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-commit-message-qa:
    runs-on: ubuntu-latest
    outputs:
      should_create_pr: ${{ steps.check.outputs.should_create_pr }}
      commit_details: ${{ steps.check.outputs.commit_details }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check commit message
        id: check
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MESSAGE"
          if echo "$COMMIT_MESSAGE" | grep -q "Production transition:"; then
            COMMIT_DETAILS=$(echo "$COMMIT_MESSAGE" | sed -n 's/.*Production transition: \(.*\)/\1/p')
            echo "should_create_pr=true" >> $GITHUB_ENV
            echo "::set-output name=should_create_pr::true"
            echo "::set-output name=commit_details::$COMMIT_DETAILS"
          else
            echo "should_create_pr=false" >> $GITHUB_ENV
            echo "::set-output name=should_create_pr::false"
            echo "::set-output name=commit_details::"
          fi

  create-pull-request-qa:
    runs-on: ubuntu-latest
    needs: check-commit-message-qa
    if: needs.check-commit-message-qa.outputs.should_create_pr == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Create Pull Request to Production
        run: |
          BODY="This is an automated pull request created from the QA branch to Production.

          Details:
          ${{ needs.check-commit-message-qa.outputs.commit_details }}"
          gh pr create -B Production -H QA --title 'Automated PR from QA to Production' --body "$BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}